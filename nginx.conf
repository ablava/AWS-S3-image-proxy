# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
#include /usr/share/nginx/modules/*.conf;
# Compile nginx with aws_auth as dynamic module using flag:
# --add-dynamic-module=ngx_aws_auth
# and link /etc/nginx/modules -> /usr/lib64/nginx/modules
load_module modules/ngx_http_image_filter_module.so;
load_module modules/ngx_http_aws_auth_module.so;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    #include /etc/nginx/conf.d/*.conf;

    # Nginx will create a cache capable of storing 100MB of keys and 10000MB of data.
    proxy_cache_path /tmp/nginx-thumbnails levels=1:2 keys_zone=thumbnail_cache:100M inactive=60d max_size=10000M;
    
    # Main server config for client requests to view S3 images
    server {
        listen       443 ssl http2 default_server;
        listen       [::]:443 ssl http2 default_server;
        server_name  _;
        root         /usr/share/nginx/html;

        ssl_certificate      cert.pem;
        ssl_certificate_key  cert.key;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;
        ssl_prefer_server_ciphers on;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        # Use Basic Auth as an example of securing access
        auth_basic "Restricted";
        auth_basic_user_file /etc/nginx/.htpasswd;

        location /s3images {
            proxy_pass http://localhost:10198;
            proxy_pass_request_headers off;  # Keep your auth and other headers from going to AWS.
            proxy_cache thumbnail_cache;
            proxy_cache_key "$host$document_uri";
            proxy_cache_lock on;
            proxy_cache_valid 30d;  # Cache valid images for 30 days.
            proxy_cache_valid any 15s;  # Everything else gets 15s.
            proxy_cache_use_stale error timeout invalid_header updating;
            proxy_http_version 1.1;
            expires 30d;
        }
        error_page  404              /404.html;
    }

   # Resizing proxy using image filter module
   server {
        listen 10198;
        server_name localhost;

        # Request for a 300x300 thumbnail, e.g.: 
        # http://localhost:10198/s3images/resize/300x300/images/2017-09-06/jpg/2132143214.jpg
        location ~ ^/s3images/resize/([\d-]+)x([\d-]+)/(.*) {
            image_filter_jpeg_quality 85;
            image_filter_buffer 32M;
            set $image_path '$3';
            image_filter resize $1 $2;

            rewrite /s3images/resize/([\d-]+)x([\d-]+)/(.*) /$3 break;
            proxy_pass http://127.0.0.1:10199/$3;
        }

        # Request full image, e.g.: http://localhost:10198/s3images/images/2017-09-06/jpg/2132143214.jpg
        location ~ ^/s3images/(.*) {
            rewrite /s3images/(.*) /$1 break;
            proxy_pass http://127.0.0.1:10199/$1;
        }
    }

    # Add a caching proxy to work around the error 415,
    # and to retrieve private S3 images using AWS_AUTH module
    server {
        listen 10199;
        server_name second_proxy_localhost;

        set $backend          '[BUCKET].s3.[AWS-REGION].amazonaws.com';
        aws_s3_bucket          [BUCKET];
        aws_access_key         [AWS ACCESS KEY]; # Example AKIDEXAMPLE
        aws_key_scope          [KEY SCOPE]; #Example 20150830/us-east-1/service/aws4_request
        aws_signing_key        [SIGNING KEY]; #Example L4vRLWAO92X5L3Sqk5QydUSdB0nC9+1wfqLMOKLbRp4=

        resolver 8.8.8.8 valid=300s;  # Use Google for DNS.
        resolver_timeout 5s;

        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_pass_request_body off;  # Not needed by AWS.
        proxy_intercept_errors on;

        # Clean up the headers going to and from S3.
        proxy_hide_header "x-amz-id-2";
        proxy_hide_header "x-amz-request-id";
        proxy_hide_header "x-amz-storage-class";
        proxy_hide_header "Content-Type";
        proxy_hide_header "Set-Cookie";
        proxy_ignore_headers "Set-Cookie";
        proxy_set_header Host $backend;
        proxy_method GET;

        # Request e.g.: http://localhost:10199/images/2017-09-06/jpg/2132143214.jpg
        location ~ ^/(.*) {
            rewrite /(.*) /$1 break;
            proxy_pass http://$backend/$1;
            aws_sign;
            aws_endpoint "s3.[AWS-REGION].amazonaws.com";

            proxy_cache thumbnail_cache;
            proxy_cache_key "temp_$proxy_host$uri";
            proxy_cache_valid 300s;  # Cache S3 images for 5 minutes.
            expires 300s;
        }
    }
}
